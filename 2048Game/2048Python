import random
import tkinter as tk
import tkinter.messagebox
import pygame
import autopy 

class Game2048:
    def __init__(self):
        pygame.init()
        pygame.joystick.init()
        if pygame.joystick.get_count() > 0:
            self.joystick = pygame.joystick.Joystick(0)
            self.joystick.init()
        else:
            self.joystick = None

        self.board = self.initialize_board()
        self.window = tk.Tk()
        self.window.title("2048 Game")
        self.canvas = tk.Canvas(self.window, width=420, height=420, bg="lightgray")
        self.canvas.pack()
        self.cells = [[None for _ in range(4)] for _ in range(4)]
        self.create_grid()
        self.new_tile_position = None
        self.update_grid()
        self.window.bind("<Key>", self.handle_keypress)
        self.window.bind("<ButtonPress-1>", self.on_mouse_press)
        self.window.bind("<ButtonRelease-1>", self.on_mouse_release)
        self.start_x = None
        self.start_y = None
        self.window.after(100, self.handle_joystick_input)
        self.window.mainloop()

    def initialize_board(self):
        board = [[0] * 4 for _ in range(4)]
        self.add_random_tile(board)
        self.add_random_tile(board)
        return board

    def add_random_tile(self, board):
        empty_cells = [(r, c) for r in range(4) for c in range(4) if board[r][c] == 0]
        if empty_cells:
            r, c = random.choice(empty_cells)
            board[r][c] = 4 if random.random() < 0.1 else 2
            self.new_tile_position = (r, c)

    def create_grid(self):
        for r in range(4):
            for c in range(4):
                x0 = c * 105 + 5
                y0 = r * 105 + 5
                x1 = x0 + 100
                y1 = y0 + 100
                self.cells[r][c] = self.canvas.create_rectangle(x0, y0, x1, y1, fill="lightgray", outline="black")
                self.canvas.create_text((x0 + x1) // 2, (y0 + y1) // 2, text="", font=("Helvetica", 24), tags=f"text_{r}_{c}")

    def update_grid(self):
        for r in range(4):
            for c in range(4):
                value = self.board[r][c]
                if self.new_tile_position == (r, c):
                    color = "lightyellow" if value != 0 else "lightgray"
                else:
                    color = "lightgray" if value == 0 else "orange"
                self.canvas.itemconfig(self.cells[r][c], fill=color)
                text_tag = f"text_{r}_{c}"
                if value == 0:
                    self.canvas.itemconfig(text_tag, text="")
                else:
                    self.canvas.itemconfig(text_tag, text=str(value))
        self.new_tile_position = None

    def slide_left(self, row):
        new_row = [i for i in row if i != 0]
        new_row += [0] * (4 - len(new_row))
        return new_row

    def combine_row(self, row):
        combined = [False] * 4
        for i in range(3):
            if row[i] == row[i + 1] and row[i] != 0 and not combined[i] and not combined[i + 1]:
                row[i] *= 2
                row[i + 1] = 0
                combined[i] = True
        return row

    def move_left(self, board):
        new_board = []
        for row in board:
            new_row = self.slide_left(row)
            new_row = self.combine_row(new_row)
            new_row = self.slide_left(new_row)
            new_board.append(new_row)
        return new_board

    def rotate_board(self, board):
        return [list(row) for row in zip(*board[::-1])]

    def move(self, direction):
        if direction == 'w':
            self.board = self.rotate_board(self.board)
            self.board = self.rotate_board(self.board)
            self.board = self.rotate_board(self.board)
            self.board = self.move_left(self.board)
            self.board = self.rotate_board(self.board)
        elif direction == 's':
            self.board = self.rotate_board(self.board)
            self.board = self.move_left(self.board)
            self.board = self.rotate_board(self.board)
            self.board = self.rotate_board(self.board)
            self.board = self.rotate_board(self.board)
        elif direction == 'a':
            self.board = self.move_left(self.board)
        elif direction == 'd':
            self.board = self.rotate_board(self.board)
            self.board = self.rotate_board(self.board)
            self.board = self.move_left(self.board)
            self.board = self.rotate_board(self.board)
            self.board = self.rotate_board(self.board)

    def check_game_over(self):
        for row in self.board:
            if 0 in row:
                return False
        for r in range(4):
            for c in range(3):
                if self.board[r][c] == self.board[r][c + 1]:
                    return False
        for r in range(3):
            for c in range(4):
                if self.board[r][c] == self.board[r + 1][c]:
                    return False
        return True

    def handle_keypress(self, event):
        if event.keysym in ['w', 'a', 's', 'd']:
            old_board = [row[:] for row in self.board]
            self.move(event.keysym)
            if old_board != self.board:
                self.add_random_tile(self.board)
                self.update_grid()
                if self.check_game_over():
                    tk.messagebox.showinfo("Game Over", "Game Over!")

    def handle_joystick_input(self):
        if self.joystick:
            pygame.event.pump()
            axis_0 = self.joystick.get_axis(0)
            axis_1 = self.joystick.get_axis(1)

            if axis_0 < -0.5:
                direction = 'a'
            elif axis_0 > 0.5:
                direction = 'd'
            elif axis_1 < -0.5:
                direction = 'w'
            elif axis_1 > 0.5:
                direction = 's'
            else:
                direction = None

            if direction:
                old_board = [row[:] for row in self.board]
                self.move(direction)
                if old_board != self.board:
                    self.add_random_tile(self.board)
                    self.update_grid()
                    if self.check_game_over():
                        tk.messagebox.showinfo("Game Over", "Game Over!")

        self.window.after(100, self.handle_joystick_input)

    def on_mouse_press(self, event):
        self.start_x = event.x
        self.start_y = event.y

    def on_mouse_release(self, event):
        end_x = event.x
        end_y = event.y
        dx = end_x - self.start_x
        dy = end_y - self.start_y

        if abs(dx) > abs(dy):
            if dx > 0:
                direction = 'd'
            else:
                direction = 'a'
        else:
            if dy > 0:
                direction = 's'
            else:
                direction = 'w'

        old_board = [row[:] for row in self.board]
        self.move(direction)
        if old_board != self.board:
            self.add_random_tile(self.board)
            self.update_grid()
            if self.check_game_over():
                tk.messagebox.showinfo("Game Over", "Game Over!")

if __name__ == "__main__":
    Game2048()
    autopy.mouse.move(100, 100)